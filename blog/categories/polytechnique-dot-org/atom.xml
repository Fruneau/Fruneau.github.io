<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Polytechnique.org | Mind...]]></title>
  <link href="http://blog.mymind.fr/blog/categories/polytechnique-dot-org/atom.xml" rel="self"/>
  <link href="http://blog.mymind.fr/"/>
  <updated>2013-12-29T20:41:30+01:00</updated>
  <id>http://blog.mymind.fr/</id>
  <author>
    <name><![CDATA[Florent Bruneau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Polytechnique.org Lance Son Blog]]></title>
    <link href="http://blog.mymind.fr/blog/2008/06/04/polytechniqueorg-lance-son-blog/"/>
    <updated>2008-06-04T01:33:00+02:00</updated>
    <id>http://blog.mymind.fr/blog/2008/06/04/polytechniqueorg-lance-son-blog</id>
    <content type="html"><![CDATA[<p>Voilà&hellip; cela fait assez longtemps que nous recevons des demandes d'utilisateurs pour la mise en place de blog via Polytechnique.org. Afin de préparer la mise en place de ce service, Polytechnique.org lance son blog. Cela permettra à la fois :</p>

<ul>
<li>de tester l'outil d'intégration de l'authentification de Polytechnique.org dans Dotclear.</li>
<li>d'offrir une nouvelle plateforme souple et conviviale pour informer nos utilisateurs.</li>
</ul>


<p>Je ne vais pas m'étendre davantage vu que ce ne serait que recopier <a href="http://blog.polytechnique.org/post/2008/06/01/Creation-du-blog-de-lequipe-Polytechniqueorg">le post d'Aymeric</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Afficher Des Discussions]]></title>
    <link href="http://blog.mymind.fr/blog/2007/11/01/afficher-des-discussions/"/>
    <updated>2007-11-01T18:24:00+01:00</updated>
    <id>http://blog.mymind.fr/blog/2007/11/01/afficher-des-discussions</id>
    <content type="html"><![CDATA[<p>Lorsqu'un logiciel a pour vocation d'afficher des discussions, on attend de sa part qu'il nous permette de voir simplement qui répond à qui, dans quel contexte&hellip; Ce n'est pas toujours ce qui est le mieux fait. Par exemple, les programmes de fora en ligne à la mode (phpBB par exemple) affiche les discussion comme une succession de rectangles juxtaposés et seul le contenu du message permet de voir qu'il en cite un autre. D'autres logiciels comme Mail.app ont ce défaut et parfois la fâcheuse manie de ne pas vouloir corriger ce problème.</p>

<p>L'affichage de l'arborescence dans <a href="http://opensource.polytechnique.org/banana">Banana</a> est une des fonctionnalités clés&hellip; et elle va beaucoup changer dans la prochaine version.</p>

<!-- more -->


<h1> Une ligne par entrée</h1>

<p>La solution habituelle pour afficher l'arborescence est d'utiliser un message par ligne de telle, des + ou &ndash; pour ouvrir ou fermer les noeuds. C'est la solution actuelle de banana.</p>

<p><img src="{{%20site.url%20}}/assets/screenshots/old-thread.png" alt="Banana Thread up to 1.7" /></p>

<p>Avec cette solution, on perd très rapidement en lisibilité : dès que la discussion dépasse une vingtaine de messages, l'arborescence devient très haute et plus ça va, plus le titre dérive vers la droite rendant parfois le lien inaccessible. Lorsqu'il y a un troll, il est de fait très courant que certains nouveaux messages se trouvent perdus plusieurs pages en arrière dans l'arborescence, ou que sur certains navigateurs, il soit difficile d'y accéder. De plus l'interface se trouve souvent surchargée, à la limite de la lisibilité : c'est dur de faire tenir un maximum d'informations en un minimum de place en gardant la lisibilité de l'ensemble.</p>

<h1> Une solution plus visuelle</h1>

<p>Je ne sais pas combien de personnes connaissent <a href="http://home.snafu.de/stk/macsoup/">MacSoup</a>. Il s'agit d'un petit client NNTP pour MacOS, qui en soit n'a pas beaucoup d'intérêt (il est payant et est relativement limité). Le principal atout de MacSoup est son interface de visualisation des threads (les utilisateurs diront qu'il y a bien plus que l'interface graphique, mais également l'interface clavier etc&hellip;). On trouve sur internet quelques captures d'écran en cherchant dans les <a href="http://www.exalead.com/image/results?q=macsoup%20screenshot">moteurs de recherche d'image</a> :</p>

<p>((<a href="http://www.fen-net.de/~xx511/bilder/macsoup/Thread.gif">http://www.fen-net.de/~xx511/bilder/macsoup/Thread.gif</a>))</p>

<p>Cette interface est compacte, visuelle et permet d'accéder rapidement à n'importe quel message du thread. Pour la prochaine version de Banana, je me suis fortement inspiré de cette interface pour réécrire de 0 l'affichage de l'arborescence. Ceci donne :</p>

<p><img src="{{%20site.url%20}}/assets/screenshots/new-thread.png" alt="Thread view in Banana" /></p>

<p>Il s'agit de la même discussion que précédemment. On voit donc ici facilement l'arborescence. Lorsqu'un message est non lu, la branche à laquelle il est attaché est noire au lieu de grise ce qui permet de l'identifier du premier coup d'oeil. Les couleurs de fond des noeuds (une idée de <a href="http://www.falco.bz">Falco</a>) sont obtenue à partir d'un hash quelconque sur l'émetteur et permettent donc d'identifier les messages envoyés par la même personne. Lorsqu'on laisse la souris sur un noeud, le nom de l'expéditeur et l'heure du post s'affichent (malheureusement le pointeur de la souris n'apparaît pas sur la capture d'écran)&hellip; et bien sûr quand on clique sur un noeud, on va sur le message correspondant.</p>

<p>Lorsqu'on est sur un message, on garde également la vue du thread ce qui permet de toujours savoir où on est dans la discussion :</p>

<p><img src="{{%20site.url%20}}/assets/screenshots/new-thread-nav.png" alt="Thread view with selected message" /></p>

<p>Il y a encore un peu de travail à faire pour améliorer les performances de la génération des arbres et pour augmenter sa compacité (éviter les branches qui descendent très bas alors qu'elles auraient pu trouver leur place dans le l'espace vide disponible).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[15 000]]></title>
    <link href="http://blog.mymind.fr/blog/2007/10/08/15-000/"/>
    <updated>2007-10-08T00:32:00+02:00</updated>
    <id>http://blog.mymind.fr/blog/2007/10/08/15-000</id>
    <content type="html"><![CDATA[<p>Ca y est&hellip; 15 000 inscrits à <a href="https://www.polytechnique.org">Polytechnique.org</a>.</p>

<p><img src="{{%20site.url%20}}/assets/screenshots/15.000.png" alt="15.000 inscrits" /></p>

<p>Si l'ascension continue, nous devrions atteindre les 16 000 l'année prochaine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La Banane Et L'escargot]]></title>
    <link href="http://blog.mymind.fr/blog/2007/05/07/la-banane-et-lescargot/"/>
    <updated>2007-05-07T19:44:00+02:00</updated>
    <id>http://blog.mymind.fr/blog/2007/05/07/la-banane-et-lescargot</id>
    <content type="html"><![CDATA[<p>La release de <a href="http://opensource.polytechnique.org/banana/">Banana</a> 1.6 en même temps que celle de plat/al 0.9.14 a mis en évidence un certain nombre de faiblesses dans Banana. En particuliers la génération du spool (mise en cache de l'arborescence des messages) et des flux RSS s'est révélé extrêmement lourde pour plusieurs raisons :</p>

<ul>
<li>l'accès aux mbox des Mailing-Lists nécessite d'appel du <code>mbox-helper</code>, et donc un <code>fork</code>&hellip; opération lourde, qui répétée plusieurs fois par mbox devient rapidement très lourde lorsqu'on a plusieurs dizaines de Mailing-Lists.</li>
<li>le traitement des données par PHP est loin d'être immédiats&hellip; et il y a clairement des goulots d'étranglement dans le code.</li>
</ul>


<p>C'est pour ces raisons que j'ai passé Banana au <code>profiler</code>, c'est à dire que j'ai analysé l'exécution de Banana à l'aide d'un outil qui permet de tracer l'exécution du programme et mettant un accent particuliers sur le temps d'exécution de chaque fonction. L'outil que j'ai trouvé pour faire ça est <a href="http://www.xdebug.org">xdebug</a>, utilisé conjointement à <a href="http://kcachegrind.sourceforge.net/">KCacheGrind</a>.</p>

<!-- more -->


<h1>Forks</h1>

<p>Je dois avouer que lorsque j'avais fait mes tests, je n'avais pas plusieurs centaines de Mailing-Lists à traiter&hellip; et je ne m'attendais pas à ce qu'une fois passée en production le script de mise à jour des flux RSS puisse prendre toutes les ressources de la machine pendant plusieurs minutes. Il a donc fallu sérieusement restructurer la gestion des accès aux Mailing-Lists pour restreindre au maximum le nombre d'accès au <code>mbox-helper</code> (un petit programme écrit en C qui se charge de tous les accès aux mbox), et, en cas d'accès, limiter au maximum le temps passer sur le <code>mbox-helper</code>.</p>

<p>Donc désormais le <code>mbox-helper</code> n'est plus appelé que si la mbox a changé depuis le dernier passage (le changement étant détecté par la taille du fichier). Ce qui permet donc de supprimer le lancement d'environ 500 <code>mbox-helper</code> lors des rafraîchissements des spools (en effet, un nombre négligeable de Mailing-List aura des nouveaux messages lors du passage du script toutes les 5, 10 ou 20 minutes). Ajouté à cela la correction d'un bug qui faisait que l'appel au <code>mbox-helper</code> oubliait de spécifier l'offset où chercher le message à traiter et qui forçait donc le <code>mbox-helper</code> à relire la totalité de la mbox, on peut se permettre de supposer que la prochaine version de Banana sera plus efficace pour la gestion des mbox.</p>

<h1>Array_shift</h1>

<h2>Piles</h2>

<p>Il est souvent extrêment pratique d'utiliser une pile de données. Cela permet de traiter les informations dans l'ordre de la pile sans excès de mémoire puisque chaque élément est dépilé avant d'être traité. C'est une technique que j'aime particulièrement lorsque j'ai une suite de lignes à traiter : je prend un tableau contenant une ligne par entrée et je le parcours avec <code>array_shift</code> qui permet de dépiler le premier élément du tableau. On obtient ainsi un code de la forme</p>

<p>{% highlight php %}
while (!is_null($line = array_shift($lines))) {</p>

<pre><code>do_something($line);
</code></pre>

<p>}
do_something($lines);
{% endhighlight %}</p>

<p>Un <code>foreach</code> peut très bien faire la même chose, mais on perd les avantages de la piles. Avec cette structure, pour avoir le même comportement que la boucle précédente, il faut ajouter un <code>unset()</code> :</p>

<p>{% highlight php %}
foreach ($lines as $key=>&amp;$value) {</p>

<pre><code>do_something($line);
unset($lines[$key]);
</code></pre>

<p>}
do_something($lines);
{% endhighlight %}</p>

<p>Certes le <code>foreach</code> sera sensiblement plus rapide que le <code>while</code>/<code>array_shift()</code> car il comprend un appel de fonction à chaque itération, mais on peut s'attendre raisonnablement à ce que cet appel soit en O(1), et ait donc un coût négligeable.</p>

<h2>Profiler</h2>

<p>Là où il y a un problème c'est que le profiler m'indique que <code>array_shift</code> prend 57% du temps d'exécution de Banana. Ces 57% sont partagés entre 80000 appels à la fonction, mais le plus marquant c'est que parmi ces 80000 appels, ce ne sont que 24000 d'entre eux qui prennent la quasi-totalité du temps. Pourquoi ces appels particuliers sont-ils si lourd alors que les 60000 autres ont un coût parfaitement négligeable.</p>

<p>La seule différence entre ces deux cas d'appels c'est que les <em>lourds</em> traitent un énorme tableau de 24000 lignes, alors que les <em>légers</em> traitent un grand nombre de petits tableaux de quelques dizaines de lignes chacun. Il est donc extrêmement clair que <code>array_shift</code> <strong>n'est pas</strong> une fonction en O(1)&hellip; J'ai donc changé la structure de code qui reflétait la structure de données par une simple boucle qui perd en lisibilité dans <a href="http://opensource.polytechnique.org/viewsvn/diff.php?path=/trunk/banana/mbox.inc.php&amp;rev=248&amp;repname=Banana">ce patch</a>. Après ce changement, les 60000 <code>array_shift</code> restant ne prennent que 0.16% du temps d'exécution de Banana&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.9.14 en Ligne !]]></title>
    <link href="http://blog.mymind.fr/blog/2007/04/29/0914-en-ligne/"/>
    <updated>2007-04-29T21:09:00+02:00</updated>
    <id>http://blog.mymind.fr/blog/2007/04/29/0914-en-ligne</id>
    <content type="html"><![CDATA[<p>Ca y est, comme annoncé dans <a href="/mind/post/2007/03/30/Un-apercu-de-la-version-0914-de-plat/al">mon billet de fin mars</a>, la version 0.9.14 de <a href="http://opensource.polytechnique.org/platal">plat/al</a> est en ligne depuis vendredi soir. Comme expliqué précédemment, cette version apporte un grand nombre d'innovations comme <a href="/mind/post/2007/02/25/Un-client-RSS-pour-lire-les-Forums-NNTP-et-les-Mailing-Lists">le flux RSS pour les Mailing-Lists et les Fora</a>, la <a href="/mind/post/2007/03/15/Soundex-Francais">recherche par proximité sonore améliorée</a> et généralisée, un système d'annonces retravaillé pour offrir un approche plus conviviale, et bien sûr, le passage en UTF-8.</p>

<p>Mais de tout cela, j'en ai déjà parlé&hellip; je tiens par contre à m'étendre sur les quelques fonctionnalités qui ont été développées durant le dernier mois (en fait, durant les dernières deux semaines de développement, le reste du temps ayant été consacré aux tests).</p>

<!-- more -->


<h1>Recherche interactive</h1>

<p>Caribou a réalisé un énorme travail sur la mise en place d'un remplissage automatique (auto-completion pour les geeks) sur la recherche avancée. Ainsi, lorsqu'on tape quelques caractères dans un champ, une liste de propositions apparaît avec pour chaque proposition le nombre de camarades correspondant à la requête. Ce qui donne par exemple :</p>

<p><img src="{{%20site.url%20}}/assets/screenshots/select-ville.png" alt="Auto-Completion sur les villes" /></p>

<p><img src="{{%20site.url%20}}/assets/screenshots/select-pays.png" alt="Auto-Completion sur les pays" /></p>

<p>Par contre, là où cela devient très intéressant, c'est que l'interface reste flexible : si vous préférez choisir dans une liste des valeurs possibles plutôt que d'utiliser l'auto-completion, ce qui est envisageable, il suffit, si c'est disponible pour le champ correspondant, de cliquer sur la petite icône représentant une liste en fin de ligne&hellip; Ainsi, pour les pays, cela donne :</p>

<p><img src="{{%20site.url%20}}/assets/screenshots/select-pays-dropdown.png" alt="Choix sur les pays" /></p>

<p>Il s'agit du même champ dont le <input type="text"> a été remplacé par une <select>.</p>

<h1>Sondages</h1>

<p>Les sondages étaient la seule fonctionnalité du site qui avait été perdue lors du passage à plat/al il y a maintenant 2 ans et demi. C'est maintenant réparé grâce au travail de pika. Cette fonctionnalité étant de fait encore jeune, on peut s'attendre à ce que l'interface soit retravaillée fortement dans les prochaines versions du site pour s'adapter aux attentes des utilisateurs. Néanmoins, il est à noter que l'édition des sondages a été travaillée de telle sorte qu'un sondage soit facilement éditable : l'utilisateur qui crée un sondage peut aisément ajouter, supprimer ou modifier des questions, et les administrateurs ont accès exactement aux mêmes fonctionnalités pour la maintenance des sondages.</p>

<p>Nous attendons maintenant l'utilisation de cette fonctionnalité pour avoir des retours de la part de nos utilisateurs. Si l'expérience se révèle concluante, les sondages seront intégrés à Polytechnique.net pour que les animateurs les aient à leur disposition directement depuis l'interface de gestion des groupes.</p>

<h1>Ensemble d'utilisateurs</h1>

<p>Il s'agit de la partie sur laquelle j'ai travaillé, et donc celle que je connais le mieux, mais c'est aussi la partie la plus abstraite. Pour l'utilisateur, ça ne change quasiment rien, par contre au niveau du moteur du site, c'est à mon sens un pas en avant important vers des interfaces plus adaptées aux besoins des utilisateurs. C'est pour cette raison que cette partie risque d'être un poil technique.</p>

<p>Ce dont je parlais au paragraphe précédent est la gestion des ensembles d'utilisateurs&hellip; mais qu'est-ce donc ? un ensemble d'utilisateur est tout simplement une sélection d'utilisateurs dans l'annuaire, ça peut être les membres d'une Mailing-List, les contacts d'un utilisateur, les membres d'un groupe, les camarades correspondant à une recherche&hellip;</p>

<p>Le problème est que je voudrais que dès que sélectionne un ensemble d'utilisateur, je puisse séparer totalement la représentation de ces utilisateurs de la sélection qui est faite : ainsi si je choisi mes contacts, je veux pouvoir afficher mes contacts sur un planisphère, voir le trombinoscope de mes contacts, mais aussi voir leurs fiches&hellip; mais je voudrais avoir les mêmes outils pour toute autre sélection d'utilisateur.</p>

<p>La résolution propre de ce problème (c'est-à-dire, sans tout recoder à chaque cas possible d'utilisation) est l'utilisation d'un outil orienté Model/View :</p>

<ul>
<li>le modèle gère la parti sélection des utilisateurs en fonction de la page</li>
<li>l'afficheur sélectionne les données à afficher pour les utilisateurs et génère ce que l'utilisateur verra</li>
</ul>


<p>Dans plat/al, le Model s'appelle PlSet (duquel hérite un UserSet spécialisé dans les ensembles d'utilisateurs), et le View s'appelle PlView. De cette manière, l'affichage des contacts se fait en 5 lignes de code :</p>

<p>{% highlight php %}
$view = new UserSet(&ldquo;INNER JOIN contacts AS c2 ON (u.user_id = c2.contact)&rdquo;, &ldquo; c2.uid = $uid &rdquo;);
$view->addMod(&lsquo;minifiche&rsquo;, &lsquo;Mini-Fiches&rsquo;, true);
$view->addMod(&lsquo;trombi&rsquo;, &lsquo;Trombinoscope&rsquo;, false, array(&lsquo;with_admin&rsquo; => false, &lsquo;with_promo&rsquo; => true));
$view->addMod(&lsquo;geoloc&rsquo;, &lsquo;Planisphère&rsquo;);
$view->apply(&lsquo;carnet/contacts&rsquo;, $page, $action, $subaction);
{% endhighlight %}</p>

<p>On crée le UserSet en lui donnant les critères de sélection des utilisateurs à afficher, puis on ajoute les Views à utiliser, enfin on gère l'affichage (en fonction des arguments passés à l'affichage de la page). C'est le type d'abstraction qui font vraiment plaisir car finalement on se rapproche du slogan de Qt : {{Code less, Do more}}.</p>

<p>Bien sûr, il faut développer tout le background, mais le temps de développement est négligeable comparé à celui qu'on aurait passé à dupliquer ce code, voire justement à ne pas le dupliquer en raison de la complexité de certains cas. Un autre exemple d'utilisation est sur l'annuaire des groupes sur Polytechnique.net :</p>

<p>{% highlight php %}
$view = new UserSet();
$view->addMod(&lsquo;trombi&rsquo;, &lsquo;Trombinoscope&rsquo;);
$view->addMod(&lsquo;geoloc&rsquo;, &lsquo;Planisphère&rsquo;);
$view->apply(&lsquo;annuaire&rsquo;, $page, $action, $subaction);
{% endhighlight %}</p>

<p>Dans ce cas, comme UserSet sait que s'il est appelé dans le cadre d'un groupe-X sur Polytechnique.net, il ne doit pas sélectionner d'utilisateurs hors de l'annuaire de ce groupe, il n'y a aucune restriction à lui indiquer : tout l'annuaire du groupe est sélectionné. On ajoute les deux modules de représentation qu'on désire utiliser : trombinoscope et Planispère, et applique à la page&hellip; en 4 lignes c'est fait.</p>

<p>Je m'extasie devant ce travail parce que je suis content du résultat, mais il n'est pas pour autant parfait. Son problème actuel est dû au background basé sur SQL : chaque élément (PlSet ou PlView) apporte des bribes d'une requête SQL permettant de finalement obtenir toutes les informations à afficher (PlView) pour les utilisateurs sélectionnés (PlSet), mais il peut arriver qu'une même donnée soit utilisée pour la sélection et pour l'affichage. Dans ce cas, la solution la plus simple est de dupliquer les jointures dans la requête, mais c'est une solution qui peut sérieusement alourdir et ralentir la requête.</p>

<p>L'implémentation actuelle gère la duplication au cas par cas : les PlView peuvent contenir tester s'il faut sélectionner un champ ou non en testant la classe du PlSet utilisé. Cette solution n'est pas particulièrement propre. La meilleure solution envisageable est d'utiliser une abstraction des champs SQL : chaque élément ne donnerait plus une bribe de requête SQL mais des informations sur &ldquo;comment sélectionner la donnée&rdquo;&hellip; ensuite la génération de la requête consiste à comparer toutes ces informations et à les assembler. Plat/al possède déjà les outils nécessaires pour réaliser ce jeu d'assemblage&hellip; ce sera très probablement pour la prochaine release.</p>
]]></content>
  </entry>
  
</feed>
